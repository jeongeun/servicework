************RecoTracker****************
***********************************************************************
#TargetCC: /RecoTracker/FinalTrackSelectors/plugins/AnalyticalTrackSelector.cc     #Function: AnalyticalTrackSelector
106:  if (cfg.exists("useAnyMVA"))
150:      cfg.existsAs<int32_t>("max_minMissHitOutOrIn") ? cfg.getParameter<int32_t>("max_minMissHitOutOrIn") : 99);
152:      cfg.existsAs<double>("max_lostHitFraction") ? cfg.getParameter<double>("max_lostHitFraction") : 1.0);
158:  keepAllTracks_.push_back(cfg.exists("keepAllTracks") ? cfg.getParameter<bool>("keepAllTracks") : false);
168:  if (cfg.exists("qualityBit")) {
193:    if (cfg.exists("useMVA"))
198:      if (cfg.exists("minMVA"))
201:      mvaType_.push_back(cfg.exists("mvaType") ? cfg.getParameter<std::string>("mvaType") : "Detached");
202:      forestLabel_.push_back(cfg.exists("GBRForestLabel") ? cfg.getParameter<std::string>("GBRForestLabel")
204:      useMVAonly_.push_back(cfg.exists("useMVAonly") ? cfg.getParameter<bool>("useMVAonly") : false);
###pramCC: useAnyMVA  lineCC: 104 lineFill: 0
###pramCC: max_minMissHitOutOrIn  lineCC: 93 lineFill: 0
###pramCC: max_lostHitFraction  lineCC: 94 lineFill: 0
###pramCC: keepAllTracks  lineCC: 176 lineFill: 0
###pramCC: qualityBit  lineCC: 161 lineFill: 0
###pramCC: useMVA  lineCC: 99 lineFill: 0
###pramCC: minMVA  lineCC: 199 lineFill: 0
###pramCC: mvaType  lineCC: 98 lineFill: 0
###pramCC: GBRForestLabel  lineCC:  lineFill: 0
###pramCC: useMVAonly  lineCC: 207 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/FinalTrackSelectors/plugins/AnalyticalTrackSelector.cc     #Function: AnalyticalTrackSelector
106:  if (cfg.exists("useAnyMVA"))
150:      cfg.existsAs<int32_t>("max_minMissHitOutOrIn") ? cfg.getParameter<int32_t>("max_minMissHitOutOrIn") : 99);
152:      cfg.existsAs<double>("max_lostHitFraction") ? cfg.getParameter<double>("max_lostHitFraction") : 1.0);
158:  keepAllTracks_.push_back(cfg.exists("keepAllTracks") ? cfg.getParameter<bool>("keepAllTracks") : false);
168:  if (cfg.exists("qualityBit")) {
193:    if (cfg.exists("useMVA"))
198:      if (cfg.exists("minMVA"))
201:      mvaType_.push_back(cfg.exists("mvaType") ? cfg.getParameter<std::string>("mvaType") : "Detached");
202:      forestLabel_.push_back(cfg.exists("GBRForestLabel") ? cfg.getParameter<std::string>("GBRForestLabel")
204:      useMVAonly_.push_back(cfg.exists("useMVAonly") ? cfg.getParameter<bool>("useMVAonly") : false);
###pramCC: useAnyMVA  lineCC: 104 lineFill: 0
###pramCC: max_minMissHitOutOrIn  lineCC: 93 lineFill: 0
###pramCC: max_lostHitFraction  lineCC: 94 lineFill: 0
###pramCC: keepAllTracks  lineCC: 176 lineFill: 0
###pramCC: qualityBit  lineCC: 161 lineFill: 0
###pramCC: useMVA  lineCC: 99 lineFill: 0
###pramCC: minMVA  lineCC: 199 lineFill: 0
###pramCC: mvaType  lineCC: 98 lineFill: 0
###pramCC: GBRForestLabel  lineCC:  lineFill: 0
###pramCC: useMVAonly  lineCC: 207 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/FinalTrackSelectors/plugins/AnalyticalTrackSelector.cc     #Function: AnalyticalTrackSelector
106:  if (cfg.exists("useAnyMVA"))
150:      cfg.existsAs<int32_t>("max_minMissHitOutOrIn") ? cfg.getParameter<int32_t>("max_minMissHitOutOrIn") : 99);
152:      cfg.existsAs<double>("max_lostHitFraction") ? cfg.getParameter<double>("max_lostHitFraction") : 1.0);
158:  keepAllTracks_.push_back(cfg.exists("keepAllTracks") ? cfg.getParameter<bool>("keepAllTracks") : false);
168:  if (cfg.exists("qualityBit")) {
193:    if (cfg.exists("useMVA"))
198:      if (cfg.exists("minMVA"))
201:      mvaType_.push_back(cfg.exists("mvaType") ? cfg.getParameter<std::string>("mvaType") : "Detached");
202:      forestLabel_.push_back(cfg.exists("GBRForestLabel") ? cfg.getParameter<std::string>("GBRForestLabel")
204:      useMVAonly_.push_back(cfg.exists("useMVAonly") ? cfg.getParameter<bool>("useMVAonly") : false);
###pramCC: useAnyMVA  lineCC: 104 lineFill: 0
###pramCC: max_minMissHitOutOrIn  lineCC: 93 lineFill: 0
###pramCC: max_lostHitFraction  lineCC: 94 lineFill: 0
###pramCC: keepAllTracks  lineCC: 176 lineFill: 0
###pramCC: qualityBit  lineCC: 161 lineFill: 0
###pramCC: useMVA  lineCC: 99 lineFill: 0
###pramCC: minMVA  lineCC: 199 lineFill: 0
###pramCC: mvaType  lineCC: 98 lineFill: 0
###pramCC: GBRForestLabel  lineCC:  lineFill: 0
###pramCC: useMVAonly  lineCC: 207 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/FinalTrackSelectors/plugins/MultiTrackSelector.cc     #Function: MultiTrackSelector
35:  if (cfg.exists("useAnyMVA"))
39:    if (cfg.exists("GBRForestFileName")) {
115:    max_minMissHitOutOrIn_.push_back(trkSelectors[i].existsAs<int32_t>("max_minMissHitOutOrIn")
118:    max_lostHitFraction_.push_back(trkSelectors[i].existsAs<double>("max_lostHitFraction")
121:    min_eta_.push_back(trkSelectors[i].existsAs<double>("min_eta") ? trkSelectors[i].getParameter<double>("min_eta")
123:    max_eta_.push_back(trkSelectors[i].existsAs<double>("max_eta") ? trkSelectors[i].getParameter<double>("max_eta")
168:      if (trkSelectors[i].exists("useMVA"))
173:        if (trkSelectors[i].exists("minMVA"))
176:        mvaType_.push_back(trkSelectors[i].exists("mvaType") ? trkSelectors[i].getParameter<std::string>("mvaType")
178:        forestLabel_.push_back(trkSelectors[i].exists("GBRForestLabel")
181:        useMVAonly_.push_back(trkSelectors[i].exists("useMVAonly") ? trkSelectors[i].getParameter<bool>("useMVAonly")
###pramCC: useAnyMVA  lineCC: 31 lineFill: 0
###pramCC: GBRForestFileName  lineCC: 40 lineFill: 0
###pramCC: max_minMissHitOutOrIn  lineCC: 69 lineFill: 0
###pramCC: max_lostHitFraction  lineCC: 70 lineFill: 0
###pramCC: min_eta  lineCC: 71 lineFill: 0
###pramCC: max_eta  lineCC: 72 lineFill: 0
###pramCC: useMVA  lineCC: 73 lineFill: 0
###pramCC: minMVA  lineCC: 174 lineFill: 0
###pramCC: mvaType  lineCC: 77 lineFill: 0
###pramCC: GBRForestLabel  lineCC: 179 lineFill: 0
###pramCC: useMVAonly  lineCC: 74 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/FinalTrackSelectors/plugins/MultiTrackSelector.cc     #Function: MultiTrackSelector
35:  if (cfg.exists("useAnyMVA"))
39:    if (cfg.exists("GBRForestFileName")) {
115:    max_minMissHitOutOrIn_.push_back(trkSelectors[i].existsAs<int32_t>("max_minMissHitOutOrIn")
118:    max_lostHitFraction_.push_back(trkSelectors[i].existsAs<double>("max_lostHitFraction")
121:    min_eta_.push_back(trkSelectors[i].existsAs<double>("min_eta") ? trkSelectors[i].getParameter<double>("min_eta")
123:    max_eta_.push_back(trkSelectors[i].existsAs<double>("max_eta") ? trkSelectors[i].getParameter<double>("max_eta")
168:      if (trkSelectors[i].exists("useMVA"))
173:        if (trkSelectors[i].exists("minMVA"))
176:        mvaType_.push_back(trkSelectors[i].exists("mvaType") ? trkSelectors[i].getParameter<std::string>("mvaType")
178:        forestLabel_.push_back(trkSelectors[i].exists("GBRForestLabel")
181:        useMVAonly_.push_back(trkSelectors[i].exists("useMVAonly") ? trkSelectors[i].getParameter<bool>("useMVAonly")
###pramCC: useAnyMVA  lineCC: 31 lineFill: 0
###pramCC: GBRForestFileName  lineCC: 40 lineFill: 0
###pramCC: max_minMissHitOutOrIn  lineCC: 69 lineFill: 0
###pramCC: max_lostHitFraction  lineCC: 70 lineFill: 0
###pramCC: min_eta  lineCC: 71 lineFill: 0
###pramCC: max_eta  lineCC: 72 lineFill: 0
###pramCC: useMVA  lineCC: 73 lineFill: 0
###pramCC: minMVA  lineCC: 174 lineFill: 0
###pramCC: mvaType  lineCC: 77 lineFill: 0
###pramCC: GBRForestLabel  lineCC: 179 lineFill: 0
###pramCC: useMVAonly  lineCC: 74 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/SpecialSeedGenerators/src/SimpleCosmicBONSeeder.cc     #Function: SimpleCosmicBONSeeder
31:      seedOnMiddle_(conf.existsAs<bool>("seedOnMiddle") ? conf.getParameter<bool>("seedOnMiddle") : false),
32:      rescaleError_(conf.existsAs<double>("rescaleError") ? conf.getParameter<double>("rescaleError") : 1.0),
56:  if (conf.existsAs<edm::ParameterSet>("ClusterChargeCheck")) {
69:  if (conf.existsAs<edm::ParameterSet>("HitsPerModuleCheck")) {
###pramCC: seedOnMiddle  lineCC: 536 lineFill: 0
###pramCC: rescaleError  lineCC: 524 lineFill: 0
###pramCC: ClusterChargeCheck  lineCC: 57 lineFill: 0
###pramCC: HitsPerModuleCheck  lineCC: 70 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/SpecialSeedGenerators/src/SimpleCosmicBONSeeder.cc     #Function: SimpleCosmicBONSeeder
31:      seedOnMiddle_(conf.existsAs<bool>("seedOnMiddle") ? conf.getParameter<bool>("seedOnMiddle") : false),
32:      rescaleError_(conf.existsAs<double>("rescaleError") ? conf.getParameter<double>("rescaleError") : 1.0),
56:  if (conf.existsAs<edm::ParameterSet>("ClusterChargeCheck")) {
69:  if (conf.existsAs<edm::ParameterSet>("HitsPerModuleCheck")) {
###pramCC: seedOnMiddle  lineCC: 536 lineFill: 0
###pramCC: rescaleError  lineCC: 524 lineFill: 0
###pramCC: ClusterChargeCheck  lineCC: 57 lineFill: 0
###pramCC: HitsPerModuleCheck  lineCC: 70 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/TkSeedGenerator/plugins/MultiHitGeneratorFromChi2.cc     #Function: MultiHitGeneratorFromChi2
67:      builderName_(cfg.existsAs<std::string>("TTRHBuilder") ? cfg.getParameter<std::string>("TTRHBuilder")
89:  if (cfg.exists("SimpleMagneticField")) {
###FillDescription : 110:void MultiHitGeneratorFromChi2::fillDescriptions(edm::ParameterSetDescription& desc) {
###pramCC: TTRHBuilder  lineCC: 128 lineFill: 110
--- In cc : 128:  desc.add<std::string>("TTRHBuilder", "WithTrackAngle");
--- In cfipy : 103:    TTRHBuilder = cms.string('hltESPTTRHBWithTrackAngle')
###pramCC: SimpleMagneticField  lineCC: 87 lineFill: 110
### FinalCheck ccfillDesc 1 1  cfipython 0 1
==> Please Check and Update /RecoTracker/TkSeedGenerator/plugins/MultiHitGeneratorFromChi2.cc !!!  1 1 0 1 ../cfipython/slc7_amd64_gcc900/RecoMuon/L2MuonProducer/L2MuonProducer_cfi.py
###################################################################3
***********************************************************************
#TargetCC: /RecoTracker/TkSeedGenerator/src/ClusterChecker.cc     #Function: ClusterChecker
14:      selector_(conf.getParameter<bool>("doClusterCheck") && conf.existsAs<std::string>("cut")
24:    if (conf.existsAs<uint32_t>("DontCountDetsAboveNClusters")) {
###FillDescription : 32:void ClusterChecker::fillDescriptions(edm::ParameterSetDescription& desc) {
###Cfipython : RecoTracker/TkSeedGenerator/trackerClusterCheckDefault_cfi.py trackerClusterCheckDefault cms.EDProducer ClusterCheckerEDProducer
###pramCC: doClusterCheck  lineCC: 13 lineFill: 32
--- In cfipy : 4:  doClusterCheck = cms.bool(True),
###pramCC: DontCountDetsAboveNClusters  lineCC: 25 lineFill: 32
### FinalCheck ccfillDesc 1 0  cfipython 1 1
==> Please Check and Update /RecoTracker/TkSeedGenerator/src/ClusterChecker.cc !!!  1 0 1 1 ../cfipython/slc7_amd64_gcc900/RecoTracker/TkSeedGenerator/trackerClusterCheckDefault_cfi.py
###################################################################3
***********************************************************************
#TargetCC: /RecoTracker/TkSeedingLayers/src/SeedingLayerSetsBuilder.cc     #Function: LayerSpec
108:  if (cfgLayer.exists("HitProducer")) {
113:  bool skipClusters = cfgLayer.exists("skipClusters");
128:    if (cfgLayer.exists("matchedRecHits")) {
131:    if (cfgLayer.exists("rphiRecHits")) {
134:    if (cfgLayer.exists("stereoRecHits")) {
137:    if (cfgLayer.exists("vectorRecHits")) {
140:    if (cfgLayer.exists("useRingSlector") && cfgLayer.getParameter<bool>("useRingSlector")) {
144:        cfgLayer.exists("useSimpleRphiHitsCleaner") ? cfgLayer.getParameter<bool>("useSimpleRphiHitsCleaner") : true;
147:    double minAbsZ = cfgLayer.exists("MinAbsZ") ? cfgLayer.getParameter<double>("MinAbsZ") : 0.;
152:      bool useProjection = cfgLayer.exists("useProjection") ? cfgLayer.getParameter<bool>("useProjection") : false;
270:    if (cfg.exists(name))
###FillDescription : 247:void SeedingLayerSetsBuilder::fillDescriptions(edm::ParameterSetDescription& desc) {
###pramCC: HitProducer  lineCC: 107 lineFill: 247
###pramCC: skipClusters  lineCC: 114 lineFill: 247
###pramCC: matchedRecHits  lineCC: 129 lineFill: 247
###pramCC: rphiRecHits  lineCC: 132 lineFill: 247
###pramCC: stereoRecHits  lineCC: 135 lineFill: 247
###pramCC: vectorRecHits  lineCC: 138 lineFill: 247
###pramCC: useRingSlector  lineCC:  lineFill: 247
###pramCC: useSimpleRphiHitsCleaner  lineCC: 143 lineFill: 247
###pramCC: MinAbsZ  lineCC: 149 lineFill: 247
###pramCC: useProjection  lineCC: 153 lineFill: 247
###pramCC: if (cfg.exists(name))  lineCC: .//RecoTracker/TkSeedingLayers/src/SeedingLayerSetsBuilder.cc lineFill: 247
### FinalCheck ccfillDesc 1 0  cfipython 0 0
==> Please Check and Update /RecoTracker/TkSeedingLayers/src/SeedingLayerSetsBuilder.cc !!!  1 0 0 0 ../cfipython/slc7_amd64_gcc900/RecoTracker/TkSeedGenerator/trackerClusterCheckDefault_cfi.py
###################################################################3
***********************************************************************
#TargetCC: /RecoTracker/TkSeedingLayers/src/SeedingLayerSetsBuilder.cc     #Function: LayerSpec
108:  if (cfgLayer.exists("HitProducer")) {
113:  bool skipClusters = cfgLayer.exists("skipClusters");
128:    if (cfgLayer.exists("matchedRecHits")) {
131:    if (cfgLayer.exists("rphiRecHits")) {
134:    if (cfgLayer.exists("stereoRecHits")) {
137:    if (cfgLayer.exists("vectorRecHits")) {
140:    if (cfgLayer.exists("useRingSlector") && cfgLayer.getParameter<bool>("useRingSlector")) {
144:        cfgLayer.exists("useSimpleRphiHitsCleaner") ? cfgLayer.getParameter<bool>("useSimpleRphiHitsCleaner") : true;
147:    double minAbsZ = cfgLayer.exists("MinAbsZ") ? cfgLayer.getParameter<double>("MinAbsZ") : 0.;
152:      bool useProjection = cfgLayer.exists("useProjection") ? cfgLayer.getParameter<bool>("useProjection") : false;
270:    if (cfg.exists(name))
###FillDescription : 247:void SeedingLayerSetsBuilder::fillDescriptions(edm::ParameterSetDescription& desc) {
###pramCC: HitProducer  lineCC: 107 lineFill: 247
###pramCC: skipClusters  lineCC: 114 lineFill: 247
###pramCC: matchedRecHits  lineCC: 129 lineFill: 247
###pramCC: rphiRecHits  lineCC: 132 lineFill: 247
###pramCC: stereoRecHits  lineCC: 135 lineFill: 247
###pramCC: vectorRecHits  lineCC: 138 lineFill: 247
###pramCC: useRingSlector  lineCC:  lineFill: 247
###pramCC: useSimpleRphiHitsCleaner  lineCC: 143 lineFill: 247
###pramCC: MinAbsZ  lineCC: 149 lineFill: 247
###pramCC: useProjection  lineCC: 153 lineFill: 247
###pramCC: if (cfg.exists(name))  lineCC: .//RecoTracker/TkSeedingLayers/src/SeedingLayerSetsBuilder.cc lineFill: 247
### FinalCheck ccfillDesc 1 0  cfipython 0 0
==> Please Check and Update /RecoTracker/TkSeedingLayers/src/SeedingLayerSetsBuilder.cc !!!  1 0 0 0 ../cfipython/slc7_amd64_gcc900/RecoTracker/TkSeedGenerator/trackerClusterCheckDefault_cfi.py
###################################################################3
***********************************************************************
#TargetCC: /RecoTracker/TkSeedingLayers/src/SeedingLayerSetsBuilder.cc     #Function: LayerSpec
108:  if (cfgLayer.exists("HitProducer")) {
113:  bool skipClusters = cfgLayer.exists("skipClusters");
128:    if (cfgLayer.exists("matchedRecHits")) {
131:    if (cfgLayer.exists("rphiRecHits")) {
134:    if (cfgLayer.exists("stereoRecHits")) {
137:    if (cfgLayer.exists("vectorRecHits")) {
140:    if (cfgLayer.exists("useRingSlector") && cfgLayer.getParameter<bool>("useRingSlector")) {
144:        cfgLayer.exists("useSimpleRphiHitsCleaner") ? cfgLayer.getParameter<bool>("useSimpleRphiHitsCleaner") : true;
147:    double minAbsZ = cfgLayer.exists("MinAbsZ") ? cfgLayer.getParameter<double>("MinAbsZ") : 0.;
152:      bool useProjection = cfgLayer.exists("useProjection") ? cfgLayer.getParameter<bool>("useProjection") : false;
270:    if (cfg.exists(name))
###FillDescription : 247:void SeedingLayerSetsBuilder::fillDescriptions(edm::ParameterSetDescription& desc) {
###pramCC: HitProducer  lineCC: 107 lineFill: 247
###pramCC: skipClusters  lineCC: 114 lineFill: 247
###pramCC: matchedRecHits  lineCC: 129 lineFill: 247
###pramCC: rphiRecHits  lineCC: 132 lineFill: 247
###pramCC: stereoRecHits  lineCC: 135 lineFill: 247
###pramCC: vectorRecHits  lineCC: 138 lineFill: 247
###pramCC: useRingSlector  lineCC:  lineFill: 247
###pramCC: useSimpleRphiHitsCleaner  lineCC: 143 lineFill: 247
###pramCC: MinAbsZ  lineCC: 149 lineFill: 247
###pramCC: useProjection  lineCC: 153 lineFill: 247
###pramCC: if (cfg.exists(name))  lineCC: .//RecoTracker/TkSeedingLayers/src/SeedingLayerSetsBuilder.cc lineFill: 247
### FinalCheck ccfillDesc 1 0  cfipython 0 0
==> Please Check and Update /RecoTracker/TkSeedingLayers/src/SeedingLayerSetsBuilder.cc !!!  1 0 0 0 ../cfipython/slc7_amd64_gcc900/RecoTracker/TkSeedGenerator/trackerClusterCheckDefault_cfi.py
###################################################################3
***********************************************************************
#TargetCC: /RecoTracker/TkSeedingLayers/src/SeedingLayerSetsBuilder.cc     #Function: LayerSpec
108:  if (cfgLayer.exists("HitProducer")) {
113:  bool skipClusters = cfgLayer.exists("skipClusters");
128:    if (cfgLayer.exists("matchedRecHits")) {
131:    if (cfgLayer.exists("rphiRecHits")) {
134:    if (cfgLayer.exists("stereoRecHits")) {
137:    if (cfgLayer.exists("vectorRecHits")) {
140:    if (cfgLayer.exists("useRingSlector") && cfgLayer.getParameter<bool>("useRingSlector")) {
144:        cfgLayer.exists("useSimpleRphiHitsCleaner") ? cfgLayer.getParameter<bool>("useSimpleRphiHitsCleaner") : true;
147:    double minAbsZ = cfgLayer.exists("MinAbsZ") ? cfgLayer.getParameter<double>("MinAbsZ") : 0.;
152:      bool useProjection = cfgLayer.exists("useProjection") ? cfgLayer.getParameter<bool>("useProjection") : false;
270:    if (cfg.exists(name))
###FillDescription : 247:void SeedingLayerSetsBuilder::fillDescriptions(edm::ParameterSetDescription& desc) {
###pramCC: HitProducer  lineCC: 107 lineFill: 247
###pramCC: skipClusters  lineCC: 114 lineFill: 247
###pramCC: matchedRecHits  lineCC: 129 lineFill: 247
###pramCC: rphiRecHits  lineCC: 132 lineFill: 247
###pramCC: stereoRecHits  lineCC: 135 lineFill: 247
###pramCC: vectorRecHits  lineCC: 138 lineFill: 247
###pramCC: useRingSlector  lineCC:  lineFill: 247
###pramCC: useSimpleRphiHitsCleaner  lineCC: 143 lineFill: 247
###pramCC: MinAbsZ  lineCC: 149 lineFill: 247
###pramCC: useProjection  lineCC: 153 lineFill: 247
###pramCC: if (cfg.exists(name))  lineCC: .//RecoTracker/TkSeedingLayers/src/SeedingLayerSetsBuilder.cc lineFill: 247
### FinalCheck ccfillDesc 1 0  cfipython 0 0
==> Please Check and Update /RecoTracker/TkSeedingLayers/src/SeedingLayerSetsBuilder.cc !!!  1 0 0 0 ../cfipython/slc7_amd64_gcc900/RecoTracker/TkSeedGenerator/trackerClusterCheckDefault_cfi.py
###################################################################3
***********************************************************************
#TargetCC: /RecoTracker/TkSeedingLayers/src/SeedingLayerSetsBuilder.cc     #Function: layerConfig
108:  if (cfgLayer.exists("HitProducer")) {
113:  bool skipClusters = cfgLayer.exists("skipClusters");
128:    if (cfgLayer.exists("matchedRecHits")) {
131:    if (cfgLayer.exists("rphiRecHits")) {
134:    if (cfgLayer.exists("stereoRecHits")) {
137:    if (cfgLayer.exists("vectorRecHits")) {
140:    if (cfgLayer.exists("useRingSlector") && cfgLayer.getParameter<bool>("useRingSlector")) {
144:        cfgLayer.exists("useSimpleRphiHitsCleaner") ? cfgLayer.getParameter<bool>("useSimpleRphiHitsCleaner") : true;
147:    double minAbsZ = cfgLayer.exists("MinAbsZ") ? cfgLayer.getParameter<double>("MinAbsZ") : 0.;
152:      bool useProjection = cfgLayer.exists("useProjection") ? cfgLayer.getParameter<bool>("useProjection") : false;
270:    if (cfg.exists(name))
###FillDescription : 247:void SeedingLayerSetsBuilder::fillDescriptions(edm::ParameterSetDescription& desc) {
###pramCC: HitProducer  lineCC: 107 lineFill: 247
###pramCC: skipClusters  lineCC: 114 lineFill: 247
###pramCC: matchedRecHits  lineCC: 129 lineFill: 247
###pramCC: rphiRecHits  lineCC: 132 lineFill: 247
###pramCC: stereoRecHits  lineCC: 135 lineFill: 247
###pramCC: vectorRecHits  lineCC: 138 lineFill: 247
###pramCC: useRingSlector  lineCC:  lineFill: 247
###pramCC: useSimpleRphiHitsCleaner  lineCC: 143 lineFill: 247
###pramCC: MinAbsZ  lineCC: 149 lineFill: 247
###pramCC: useProjection  lineCC: 153 lineFill: 247
###pramCC: if (cfg.exists(name))  lineCC: .//RecoTracker/TkSeedingLayers/src/SeedingLayerSetsBuilder.cc lineFill: 247
### FinalCheck ccfillDesc 1 0  cfipython 0 0
==> Please Check and Update /RecoTracker/TkSeedingLayers/src/SeedingLayerSetsBuilder.cc !!!  1 0 0 0 ../cfipython/slc7_amd64_gcc900/RecoTracker/TkSeedGenerator/trackerClusterCheckDefault_cfi.py
###################################################################3
***********************************************************************
#TargetCC: /RecoTracker/TkTrackingRegions/interface/GlobalTrackingRegionProducerFromBeamSpot.h     #Function: GlobalTrackingRegionProducerFromBeamSpot
26:    if (!regionPSet.existsAs<double>("nSigmaZ") && !regionPSet.existsAs<double>("originHalfLength")) {
30:    theNSigmaZ = (regionPSet.existsAs<double>("nSigmaZ") ? regionPSet.getParameter<double>("nSigmaZ") : 0.0);
32:        (regionPSet.existsAs<double>("originHalfLength") ? regionPSet.getParameter<double>("originHalfLength") : 0.0);
36:        (regionPSet.existsAs<bool>("useMultipleScattering") ? regionPSet.getParameter<bool>("useMultipleScattering")
###pramCC: nSigmaZ  lineCC: 27 lineFill: 0
###pramCC: nSigmaZ  lineCC: 27 lineFill: 0
###pramCC: originHalfLength  lineCC: 28 lineFill: 0
###pramCC: useMultipleScattering  lineCC: 50 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/TkTrackingRegions/interface/GlobalTrackingRegionProducerFromBeamSpot.h     #Function: GlobalTrackingRegionProducerFromBeamSpot
26:    if (!regionPSet.existsAs<double>("nSigmaZ") && !regionPSet.existsAs<double>("originHalfLength")) {
30:    theNSigmaZ = (regionPSet.existsAs<double>("nSigmaZ") ? regionPSet.getParameter<double>("nSigmaZ") : 0.0);
32:        (regionPSet.existsAs<double>("originHalfLength") ? regionPSet.getParameter<double>("originHalfLength") : 0.0);
36:        (regionPSet.existsAs<bool>("useMultipleScattering") ? regionPSet.getParameter<bool>("useMultipleScattering")
###pramCC: nSigmaZ  lineCC: 27 lineFill: 0
###pramCC: nSigmaZ  lineCC: 27 lineFill: 0
###pramCC: originHalfLength  lineCC: 28 lineFill: 0
###pramCC: useMultipleScattering  lineCC: 50 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/TkTrackingRegions/interface/GlobalTrackingRegionProducerFromBeamSpot.h     #Function: GlobalTrackingRegionProducerFromBeamSpot
26:    if (!regionPSet.existsAs<double>("nSigmaZ") && !regionPSet.existsAs<double>("originHalfLength")) {
30:    theNSigmaZ = (regionPSet.existsAs<double>("nSigmaZ") ? regionPSet.getParameter<double>("nSigmaZ") : 0.0);
32:        (regionPSet.existsAs<double>("originHalfLength") ? regionPSet.getParameter<double>("originHalfLength") : 0.0);
36:        (regionPSet.existsAs<bool>("useMultipleScattering") ? regionPSet.getParameter<bool>("useMultipleScattering")
###pramCC: nSigmaZ  lineCC: 27 lineFill: 0
###pramCC: nSigmaZ  lineCC: 27 lineFill: 0
###pramCC: originHalfLength  lineCC: 28 lineFill: 0
###pramCC: useMultipleScattering  lineCC: 50 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/TkTrackingRegions/interface/GlobalTrackingRegionProducerFromBeamSpot.h     #Function: GlobalTrackingRegionProducerFromBeamSpot
26:    if (!regionPSet.existsAs<double>("nSigmaZ") && !regionPSet.existsAs<double>("originHalfLength")) {
30:    theNSigmaZ = (regionPSet.existsAs<double>("nSigmaZ") ? regionPSet.getParameter<double>("nSigmaZ") : 0.0);
32:        (regionPSet.existsAs<double>("originHalfLength") ? regionPSet.getParameter<double>("originHalfLength") : 0.0);
36:        (regionPSet.existsAs<bool>("useMultipleScattering") ? regionPSet.getParameter<bool>("useMultipleScattering")
###pramCC: nSigmaZ  lineCC: 27 lineFill: 0
###pramCC: nSigmaZ  lineCC: 27 lineFill: 0
###pramCC: originHalfLength  lineCC: 28 lineFill: 0
###pramCC: useMultipleScattering  lineCC: 50 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/TkTrackingRegions/plugins/CandidatePointSeededTrackingRegionsProducer.h     #Function: CandidatePointSeededTrackingRegionsProducer
143:    if (regPSet.exists("searchOpt"))
###pramCC: searchOpt  lineCC: 142 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/TkTrackingRegions/plugins/CandidateSeededTrackingRegionsProducer.h     #Function: CandidateSeededTrackingRegionsProducer
94:    if (regPSet.exists("searchOpt"))
###pramCC: searchOpt  lineCC: 93 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/TkTrackingRegions/plugins/PointSeededTrackingRegionsProducer.h     #Function: PointSeededTrackingRegionsProducer
102:    if (regPSet.exists("searchOpt"))
###pramCC: searchOpt  lineCC: 101 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/TrackProducer/interface/TrackProducerAlgorithm.h     #Function: TrackProducerAlgorithm
61:    geometricInnerState_ = (conf.exists("GeometricInnerState") ? conf.getParameter<bool>("GeometricInnerState") : true);
62:    if (conf.exists("reMatchSplitHits"))
64:    if (conf.exists("usePropagatorForPCA"))
###pramCC: GeometricInnerState  lineCC:  lineFill: 0
###pramCC: reMatchSplitHits  lineCC: 59 lineFill: 0
###pramCC: usePropagatorForPCA  lineCC: 60 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/TrackProducer/interface/TrackProducerAlgorithm.h     #Function: TrackProducerAlgorithm
61:    geometricInnerState_ = (conf.exists("GeometricInnerState") ? conf.getParameter<bool>("GeometricInnerState") : true);
62:    if (conf.exists("reMatchSplitHits"))
64:    if (conf.exists("usePropagatorForPCA"))
###pramCC: GeometricInnerState  lineCC:  lineFill: 0
###pramCC: reMatchSplitHits  lineCC: 59 lineFill: 0
###pramCC: usePropagatorForPCA  lineCC: 60 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/TrackProducer/interface/TrackProducerAlgorithm.h     #Function: TrackProducerAlgorithm
61:    geometricInnerState_ = (conf.exists("GeometricInnerState") ? conf.getParameter<bool>("GeometricInnerState") : true);
62:    if (conf.exists("reMatchSplitHits"))
64:    if (conf.exists("usePropagatorForPCA"))
###pramCC: GeometricInnerState  lineCC:  lineFill: 0
###pramCC: reMatchSplitHits  lineCC: 59 lineFill: 0
###pramCC: usePropagatorForPCA  lineCC: 60 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/TrackProducer/interface/TrackProducerAlgorithm.h     #Function: TrackProducerAlgorithm
61:    geometricInnerState_ = (conf.exists("GeometricInnerState") ? conf.getParameter<bool>("GeometricInnerState") : true);
62:    if (conf.exists("reMatchSplitHits"))
64:    if (conf.exists("usePropagatorForPCA"))
###pramCC: GeometricInnerState  lineCC:  lineFill: 0
###pramCC: reMatchSplitHits  lineCC: 59 lineFill: 0
###pramCC: usePropagatorForPCA  lineCC: 60 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/TrackProducer/interface/TrackProducerAlgorithm.h     #Function: TrackProducerAlgorithm
61:    geometricInnerState_ = (conf.exists("GeometricInnerState") ? conf.getParameter<bool>("GeometricInnerState") : true);
62:    if (conf.exists("reMatchSplitHits"))
64:    if (conf.exists("usePropagatorForPCA"))
###pramCC: GeometricInnerState  lineCC:  lineFill: 0
###pramCC: reMatchSplitHits  lineCC: 59 lineFill: 0
###pramCC: usePropagatorForPCA  lineCC: 60 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/TrackProducer/interface/TrackProducerAlgorithm.h     #Function: TrackProducerAlgorithm
61:    geometricInnerState_ = (conf.exists("GeometricInnerState") ? conf.getParameter<bool>("GeometricInnerState") : true);
62:    if (conf.exists("reMatchSplitHits"))
64:    if (conf.exists("usePropagatorForPCA"))
###pramCC: GeometricInnerState  lineCC:  lineFill: 0
###pramCC: reMatchSplitHits  lineCC: 59 lineFill: 0
###pramCC: usePropagatorForPCA  lineCC: 60 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/TrackProducer/interface/TrackProducerBase.icc     #Function: initTrackProducerBase
57:  if (conf_.exists("useSimpleMF"))
80:  if (conf_.exists("NavigationSchool"))
###pramCC: useSimpleMF  lineCC: 53 lineFill: 0
###pramCC: NavigationSchool  lineCC: 22 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/TrackProducer/interface/TrackProducerBase.icc     #Function: initTrackProducerBase
57:  if (conf_.exists("useSimpleMF"))
80:  if (conf_.exists("NavigationSchool"))
###pramCC: useSimpleMF  lineCC: 53 lineFill: 0
###pramCC: NavigationSchool  lineCC: 22 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 0 0
***********************************************************************
#TargetCC: /RecoTracker/TrackProducer/plugins/TrackProducer.cc     #Function: TrackProducer
27:  if (iConfig.exists("clusterRemovalInfo")) {
###Cfipython : HLTrigger/Muon/hltScoutingTrackProducer_cfi.py hltScoutingTrackProducer cms.EDProducer HLTScoutingTrackProducer
RecoPPS/Local/ctppsPixelLocalTracks_cfi.py ctppsPixelLocalTracks cms.EDProducer CTPPSPixelLocalTrackProducer
RecoPixelVertexing/PixelTrackFitting/pixelTracks_cfi.py pixelTracks cms.EDProducer PixelTrackProducer
RecoPixelVertexing/PixelTrackFitting/pixelTrackProducerFromSoA_cfi.py pixelTrackProducerFromSoA cms.EDProducer PixelTrackProducerFromSoA
RecoTauTag/HLTProducers/hltVertexFromTrackProducer_cfi.py hltVertexFromTrackProducer cms.EDProducer VertexFromTrackProducer
RecoTracker/TrackProducer/trackExtraRekeyer_cfi.py trackExtraRekeyer cms.EDProducer TrackExtraRekeyer
RecoTracker/TrackProducer/trackProducerFromPatMuons_cfi.py trackProducerFromPatMuons cms.EDProducer TrackProducerFromPatMuons
RecoTracker/TrackProducer/gsfTrackProducer_cfi.py gsfTrackProducer cms.EDProducer GsfTrackProducer
###pramCC: clusterRemovalInfo  lineCC: 28 lineFill: 0
### FinalCheck ccfillDesc 0 0  cfipython 1 0
==> Please Check and Update /RecoTracker/TrackProducer/plugins/TrackProducer.cc !!!  0 0 1 0 ../cfipython/slc7_amd64_gcc900/HLTrigger/Muon/hltScoutingTrackProducer_cfi.py
###################################################################3
